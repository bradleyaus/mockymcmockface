// Don't edit, generated code

// Create the service types
{{ define "service" }}
    type {{.Name}}Service struct{
        {{.Import}}.UnimplementedTestServer

        responseService *responses.ResponseService
    }
{{ end }}

//define method types
{{ define "method" }}
    func (t *{{.ServiceName}}Service) {{.MethodName}}(ctx context.Context, req *{{.InputImport}}.{{.InputType}}) (*{{.OutputImport}}.{{.OutputType}}, error) {
        r, err := t.responseService.GetResponse("{{.ServiceName}}", "{{.MethodName}}", req)
            if err != nil {
                log.Panicln("Error when getting response", "{{.ServiceName}}", "{{.MethodName}}")
            }

            resp := &{{.OutputImport}}.{{.OutputType}}{}

            data, _ := json.Marshal(r.Data)
            err = jsonpb.Unmarshal(bytes.NewReader(data), resp)
            return resp, err
    }
{{ end }}

{{ define "import" }}
    {{.Alias}} {{ .Package }}
{{ end }}

package main

import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/bradleyaus/mockymcmockface/pkg/responses"
	"github.com/golang/protobuf/jsonpb"
	"google.golang.org/grpc"
	"log"
	"net"

	{{ range .Imports }}
           {{ template "import" . }}
    {{ end }}

)

func main() {

	respService := responses.NewService()

	//TODO: Param the address
	addr := "localhost:5051"
	log.Println("Listening on", addr)
	lis, err := net.Listen("tcp", addr)
	if err != nil {
		log.Fatalln("failed when listening", err)
	}

	s := grpc.NewServer()

	//For each service, the template will add one of these lines
	{{ range .Services }}
        {{.Import}}.Register{{.Name}}Server(s, &{{.Name}}Service{
        		responseService:         respService,
        	})
    {{ end }}

	if err := s.Serve(lis); err != nil {
		log.Fatalln("failed when serving", err)
	}
}


{{ range .Services }}
    {{ template "service" . }}
{{ end }}

{{ range .Methods }}
        {{ template "method" . }}
{{ end }}

